# Generated by Django 3.2.8 on 2022-03-08 06:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('team_role', models.CharField(blank=True, choices=[('shared', 'Shared Account')], max_length=20, null=True)),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HQUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('published', models.BooleanField(default=False)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('modification_time', models.DateTimeField(auto_now=True)),
                ('publish_time', models.DateTimeField(blank=True, null=True)),
                ('send_email', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='HuntSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('text_value', models.TextField(blank=True, null=True)),
                ('boolean_value', models.BooleanField(blank=True, null=True)),
                ('date_value', models.DateTimeField(blank=True, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=200, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('order', models.IntegerField(unique=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='InteractionAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('accomplished', models.BooleanField(default=False)),
                ('accomplished_time', models.DateTimeField(blank=True, null=True)),
                ('interaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.interaction')),
            ],
            options={
                'verbose_name_plural': 'Interaction access',
            },
        ),
        migrations.CreateModel(
            name='Minipuzzle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref', models.CharField(max_length=128)),
                ('solved', models.BooleanField(default=False)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('solved_time', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Puzzle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.IntegerField(unique=True)),
                ('url', models.CharField(max_length=200, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('answer', models.CharField(max_length=100)),
                ('credits', models.TextField(default='')),
                ('order', models.IntegerField()),
                ('is_meta', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'ordering': ['round__order', 'order'],
            },
        ),
        migrations.CreateModel(
            name='PuzzleAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('solved', models.BooleanField(default=False)),
                ('solved_time', models.DateTimeField(blank=True, null=True)),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.puzzle')),
            ],
            options={
                'verbose_name_plural': 'Puzzle access',
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=200, unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('order', models.IntegerField(unique=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='RoundAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.round')),
            ],
            options={
                'verbose_name_plural': 'Round access',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z]*$', 'Only letters are allowed.')])),
                ('name', models.CharField(max_length=200, unique=True)),
                ('type', models.CharField(blank=True, choices=[('internal', 'Internal Team'), ('public', 'Public Team')], max_length=20, null=True)),
                ('interactions', models.ManyToManyField(through='spoilr_core.InteractionAccess', to='spoilr_core.Interaction')),
                ('puzzles', models.ManyToManyField(through='spoilr_core.PuzzleAccess', to='spoilr_core.Puzzle')),
                ('rounds', models.ManyToManyField(through='spoilr_core.RoundAccess', to='spoilr_core.Round')),
            ],
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.CharField(max_length=50)),
                ('object_id', models.CharField(blank=True, max_length=200, null=True)),
                ('message', models.TextField()),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='spoilr_core.team')),
            ],
            options={
                'verbose_name_plural': 'System log',
            },
        ),
        migrations.AddField(
            model_name='roundaccess',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.team'),
        ),
        migrations.CreateModel(
            name='PuzzleSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('raw_answer', models.TextField()),
                ('answer', models.CharField(max_length=100)),
                ('correct', models.BooleanField(default=False)),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.puzzle')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.team')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='puzzleaccess',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.team'),
        ),
        migrations.AddField(
            model_name='puzzle',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.round'),
        ),
        migrations.CreateModel(
            name='PseudoAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=100)),
                ('response', models.TextField()),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.puzzle')),
            ],
            options={
                'ordering': ['puzzle', 'answer'],
            },
        ),
        migrations.CreateModel(
            name='MinipuzzleSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_answer', models.TextField()),
                ('answer', models.CharField(max_length=100)),
                ('correct', models.BooleanField(default=False)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('minipuzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='spoilr_core.minipuzzle')),
            ],
            options={
                'ordering': ['-create_time'],
            },
        ),
        migrations.AddField(
            model_name='minipuzzle',
            name='puzzle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.puzzle'),
        ),
        migrations.AddField(
            model_name='minipuzzle',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.team'),
        ),
        migrations.AddField(
            model_name='interactionaccess',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.team'),
        ),
        migrations.AddConstraint(
            model_name='huntsetting',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('boolean_value__isnull', True), ('date_value__isnull', True), ('text_value__isnull', False)), models.Q(('boolean_value__isnull', False), ('date_value__isnull', True), ('text_value__isnull', True)), models.Q(('boolean_value__isnull', True), ('date_value__isnull', False), ('text_value__isnull', True)), models.Q(('boolean_value__isnull', True), ('date_value__isnull', True), ('text_value__isnull', True)), _connector='OR'), name='spoilr_core_huntsetting_one_value'),
        ),
        migrations.AddField(
            model_name='hqupdate',
            name='puzzle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.puzzle', verbose_name='Errata for Puzzle'),
        ),
        migrations.AddField(
            model_name='hqupdate',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='spoilr_core.team'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='spoilr_core.team'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='team',
            constraint=models.CheckConstraint(check=models.Q(('type__in', ['internal', 'public'])), name='spoilr_core_team_type_valid'),
        ),
        migrations.AddConstraint(
            model_name='team',
            constraint=models.UniqueConstraint(condition=models.Q(('type', 'public')), fields=('type',), name='spoilr_core_team_public_unique'),
        ),
        migrations.AlterUniqueTogether(
            name='roundaccess',
            unique_together={('team', 'round')},
        ),
        migrations.AlterUniqueTogether(
            name='puzzlesubmission',
            unique_together={('team', 'puzzle', 'answer')},
        ),
        migrations.AlterUniqueTogether(
            name='puzzleaccess',
            unique_together={('team', 'puzzle')},
        ),
        migrations.AlterUniqueTogether(
            name='puzzle',
            unique_together={('round', 'order')},
        ),
        migrations.AlterUniqueTogether(
            name='pseudoanswer',
            unique_together={('puzzle', 'answer')},
        ),
        migrations.AlterUniqueTogether(
            name='minipuzzlesubmission',
            unique_together={('minipuzzle', 'answer')},
        ),
        migrations.AlterUniqueTogether(
            name='minipuzzle',
            unique_together={('team', 'puzzle', 'ref')},
        ),
        migrations.AlterUniqueTogether(
            name='interactionaccess',
            unique_together={('team', 'interaction')},
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('team_role__in', ['shared'])), name='spoilr_core_user_team_role_valid'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('team_role', 'shared')), fields=('team',), name='spoilr_core_user_unique_team_shared_account'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('team__isnull', True), ('team_role__isnull', True)), models.Q(('team__isnull', False), ('team_role__isnull', False)), _connector='OR'), name='spoilr_core_user_is_captain_if_team'),
        ),
    ]
